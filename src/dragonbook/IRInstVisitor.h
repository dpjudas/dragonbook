
#pragma once

class IRInstLoad;
class IRInstStore;
class IRInstAdd;
class IRInstSub;
class IRInstFAdd;
class IRInstFSub;
class IRInstNot;
class IRInstNeg;
class IRInstFNeg;
class IRInstMul;
class IRInstFMul;
class IRInstSDiv;
class IRInstUDiv;
class IRInstFDiv;
class IRInstSRem;
class IRInstURem;
class IRInstShl;
class IRInstLShr;
class IRInstAShr;
class IRInstICmpSLT;
class IRInstICmpULT;
class IRInstFCmpULT;
class IRInstICmpSGT;
class IRInstICmpUGT;
class IRInstFCmpUGT;
class IRInstICmpSLE;
class IRInstICmpULE;
class IRInstFCmpULE;
class IRInstICmpSGE;
class IRInstICmpUGE;
class IRInstFCmpUGE;
class IRInstICmpEQ;
class IRInstFCmpUEQ;
class IRInstICmpNE;
class IRInstFCmpUNE;
class IRInstAnd;
class IRInstOr;
class IRInstXor;
class IRInstTrunc;
class IRInstZExt;
class IRInstSExt;
class IRInstFPTrunc;
class IRInstFPExt;
class IRInstFPToUI;
class IRInstFPToSI;
class IRInstUIToFP;
class IRInstSIToFP;
class IRInstBitCast;
class IRInstCall;
class IRInstGEP;
class IRInstBr;
class IRInstCondBr;
class IRInstRet;
class IRInstRetVoid;
class IRInstAlloca;
class IRInstPhi;

class IRInstVisitor
{
public:
	virtual void inst(IRInstLoad *node) = 0;
	virtual void inst(IRInstStore *node) = 0;
	virtual void inst(IRInstAdd *node) = 0;
	virtual void inst(IRInstSub *node) = 0;
	virtual void inst(IRInstFAdd *node) = 0;
	virtual void inst(IRInstFSub *node) = 0;
	virtual void inst(IRInstNot *node) = 0;
	virtual void inst(IRInstNeg *node) = 0;
	virtual void inst(IRInstFNeg *node) = 0;
	virtual void inst(IRInstMul *node) = 0;
	virtual void inst(IRInstFMul *node) = 0;
	virtual void inst(IRInstSDiv *node) = 0;
	virtual void inst(IRInstUDiv *node) = 0;
	virtual void inst(IRInstFDiv *node) = 0;
	virtual void inst(IRInstSRem *node) = 0;
	virtual void inst(IRInstURem *node) = 0;
	virtual void inst(IRInstShl *node) = 0;
	virtual void inst(IRInstLShr *node) = 0;
	virtual void inst(IRInstAShr *node) = 0;
	virtual void inst(IRInstICmpSLT *node) = 0;
	virtual void inst(IRInstICmpULT *node) = 0;
	virtual void inst(IRInstFCmpULT *node) = 0;
	virtual void inst(IRInstICmpSGT *node) = 0;
	virtual void inst(IRInstICmpUGT *node) = 0;
	virtual void inst(IRInstFCmpUGT *node) = 0;
	virtual void inst(IRInstICmpSLE *node) = 0;
	virtual void inst(IRInstICmpULE *node) = 0;
	virtual void inst(IRInstFCmpULE *node) = 0;
	virtual void inst(IRInstICmpSGE *node) = 0;
	virtual void inst(IRInstICmpUGE *node) = 0;
	virtual void inst(IRInstFCmpUGE *node) = 0;
	virtual void inst(IRInstICmpEQ *node) = 0;
	virtual void inst(IRInstFCmpUEQ *node) = 0;
	virtual void inst(IRInstICmpNE *node) = 0;
	virtual void inst(IRInstFCmpUNE *node) = 0;
	virtual void inst(IRInstAnd *node) = 0;
	virtual void inst(IRInstOr *node) = 0;
	virtual void inst(IRInstXor *node) = 0;
	virtual void inst(IRInstTrunc *node) = 0;
	virtual void inst(IRInstZExt *node) = 0;
	virtual void inst(IRInstSExt *node) = 0;
	virtual void inst(IRInstFPTrunc *node) = 0;
	virtual void inst(IRInstFPExt *node) = 0;
	virtual void inst(IRInstFPToUI *node) = 0;
	virtual void inst(IRInstFPToSI *node) = 0;
	virtual void inst(IRInstUIToFP *node) = 0;
	virtual void inst(IRInstSIToFP *node) = 0;
	virtual void inst(IRInstBitCast *node) = 0;
	virtual void inst(IRInstCall *node) = 0;
	virtual void inst(IRInstGEP *node) = 0;
	virtual void inst(IRInstBr *node) = 0;
	virtual void inst(IRInstCondBr *node) = 0;
	virtual void inst(IRInstRet *node) = 0;
	virtual void inst(IRInstRetVoid *node) = 0;
	virtual void inst(IRInstAlloca *node) = 0;
	virtual void inst(IRInstPhi* node) = 0;
};
